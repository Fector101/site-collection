/* Wrapper */
.search-input-container {
  position: relative;
  width: 24rem; /* equivalent to w-96 in Tailwind */
}

/* Input Container */
.input-container {
  position: relative;
}

/* Input Styles */
.search-input {
  width: 100%;
  padding: 0.75rem 2.5rem;
  background-color: white;
  border: 1px solid #d1d5db; /* default gray */
  border-radius: 0.5rem; /* rounded-lg */
  outline: none;
  transition: border-color 0.2s, box-shadow 0.2s;
}

.search-input:focus {
  border-color: #3b82f6; /* blue-500 */
  box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.5); /* blue ring */
}

/* Floating Label */
.search-label {
  position: absolute;
  left: 2.5rem; /* to align with the icon */
  transition: top 0.2s, font-size 0.2s, color 0.2s, background-color 0.2s;
  pointer-events: none;
  color: #9ca3af; /* gray-400 */
}

.search-label.active {
  top: -0.5rem;
  font-size: 0.75rem;
  background-color: white;
  padding: 0 0.25rem;
  color: #3b82f6; /* blue-500 */
}

/* Search Icon */
.search-icon {
  position: absolute;
  left: 0.75rem;
  top: 0.875rem; /* aligns icon vertically */
  height: 1.25rem;
  width: 1.25rem;
  transition: color 0.2s;
  color: #9ca3af; /* gray-400 */
}

.search-icon.active {
  color: #3b82f6; /* blue-500 */
}
import React, { useState } from 'react';
import { Search } from 'lucide-react';
import './SearchInput.css'; // Ensure this CSS file is imported

const SearchInput = () => {
  const [isFocused, setIsFocused] = useState(false);
  const [inputValue, setInputValue] = useState('');
  
  const isActive = isFocused || inputValue.length > 0;

  return (
    <div className="search-input-container">
      {/* Input Container */}
      <div className="input-container">
        <input
          type="text"
          id="search"
          className="search-input"
          onFocus={() => setIsFocused(true)}
          onBlur={() => setIsFocused(false)}
          value={inputValue}
          onChange={(e) => setInputValue(e.target.value)}
        />
        
        {/* Floating Label */}
        <label
          htmlFor="search"
          className={`search-label ${isActive ? 'active' : ''}`}
        >
          Search movies and TV shows
        </label>

        {/* Search Icon */}
        <Search 
          className={`search-icon ${isActive ? 'active' : ''}`}
        />
      </div>
    </div>
  );
};

export default SearchInput;